version: '3.8'

services:
  # MongoDB database
  mongo:
    image: mongo:7.0
    container_name: p2p-chat-mongo
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - p2p-chat-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # Redis for pub/sub
  redis:
    image: redis:7-alpine
    container_name: p2p-chat-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - p2p-chat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Message API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2p-chat-api
    environment:
      - SERVICE=api
      - MONGO_URL=mongodb://mongo:27017
    ports:
      - "8000:8000"
    networks:
      - p2p-chat-network
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped

  # Chat server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2p-chat-server
    environment:
      - SERVICE=server
      - MONGO_URL=mongodb://mongo:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5000:5000"
    networks:
      - p2p-chat-network
    depends_on:
      - api
      - redis
    restart: unless-stopped

  # Web interface
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2p-chat-web
    environment:
      - SERVICE=web
      - MONGO_URL=mongodb://mongo:27017
    ports:
      - "8080:8080"
    networks:
      - p2p-chat-network
    depends_on:
      - server
    restart: unless-stopped

  # Thermometer service
  thermometer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2p-chat-thermometer
    environment:
      - SERVICE=thermometer
      - MONGO_URL=mongodb://mongo:27017
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - p2p-chat-network
    depends_on:
      - server
      - redis
    restart: unless-stopped

  # Optional OpenAI bot service (requires API key)
  openai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: p2p-chat-openai
    environment:
      - SERVICE=openai
      - MONGO_URL=mongodb://mongo:27017
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - p2p-chat-network
    depends_on:
      - server
    restart: unless-stopped
    # Comment out the next line if you don't have an OpenAI API key
    profiles: ["with-openai"]

networks:
  p2p-chat-network:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local